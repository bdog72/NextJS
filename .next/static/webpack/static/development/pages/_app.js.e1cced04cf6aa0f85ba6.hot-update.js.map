{"version":3,"file":"static/webpack/static/development/pages/_app.js.e1cced04cf6aa0f85ba6.hot-update.js","sources":["webpack:///./services/auth0.js"],"sourcesContent":["import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\n\nclass Auth0 {\n  constructor(props) {\n    this.auth0 = new auth0.WebAuth({\n      domain: 'bozo72.auth0.com',\n      clientID: 'hlcgDvFQ4F0rucG4g2LQ5pR0mJCRiptz',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  handleAuthentication() {\n    // debugger;\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n          console.log(err);\n        }\n      });\n    });\n  }\n\n  setSession(authResult) {\n    const expiresAt = JSON.stringify(\n      authResult.expiresIn * 1000 + new Date().getTime()\n    );\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n\n    Cookies.set('user', authResult.idTokenPayload);\n    Cookies.set('jwt', authResult.idToken);\n    Cookies.set('expiresAt', expiresAt);\n  }\n\n  logout() {\n    Cookies.remove('user');\n    Cookies.remove('jwt');\n    Cookies.remove('expiresAt');\n\n    this.auth0.logout({\n      returnTo: '',\n      clientId: 'hlcgDvFQ4F0rucG4g2LQ5pR0mJCRiptz'\n    });\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  isAuthenticated() {\n    const expiresAt = Cookies.getJSON('expiresAt');\n\n    return new Date().getTime() < expiresAt;\n  }\n\n  verifyToken(token) {\n    if (token) {\n      const decodedToken = jwt.decode(token);\n      const expiresAt = decodedToken.exp * 1000;\n\n      return decodedToken && new Date().getTime() < expiresAt\n        ? decodedToken\n        : undefined;\n    }\n\n    return undefined;\n  }\n\n  clientAuth() {\n    // debugger;\n    const token = Cookies.getJSON('jwt');\n    const verifiedToken = this.verifyToken(token);\n\n    return token;\n  }\n\n  serverAuth(req) {\n    if (req.headers.cookie) {\n      const tokenCookie = req.headers.cookie\n        .split(';')\n        .find(c => c.trim().startsWith('jwt='));\n\n      const cookies = req.headers.cookies;\n\n      if (!tokenCookie) {\n        return undefined;\n      }\n      const token = tokenCookie.split('=')[1];\n      const verifiedToken = this.verifyToken(token);\n\n      return verifiedToken;\n    }\n    return undefined;\n  }\n}\n\nconst auth0Client = new Auth0();\n\nexport default auth0Client;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;;;;;;AAGA;AAEA;;;;A","sourceRoot":""}